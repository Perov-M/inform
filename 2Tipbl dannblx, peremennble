К переменной мы можем обратиться по её имени или адресу и получить это значение, либо изменить его. Зачем это нужно?
В переменной могут храниться промежуточные результаты вычислений, полученные "снаружи" данные (с датчиков, Интернета, интерфейсов связи) и так далее.

Измерение информации
Прежде чем перейти к переменным и их типам, нужно вспомнить школьный курс информатики, а именно - как хранятся данные в "цифровом" мире. Любая память состоит из элементарных ячеек, 
которые имеют всего два состояния: 0 и 1. Эта единица информации называется бит (bit). Минимальным блоком памяти, к которому можно обратиться из программы по имени или адресу, 
является байт (byte), который в Arduino (и в большинстве других платформ и процессоров) состоит из 8 бит, таким образом любой тип данных будет кратен 1 байту.

Максимальное количество значений, которое можно записать в один байт, составляет 2^8 = 256
. В программировании счёт всегда начинается с нуля, поэтому один байт может хранить число от 0 до 255
. Более подробно о двоичном представлении информации и битовых операциях мы поговорим в отдельном уроке.

Стандартные типы переменных в Arduino по своему размеру кратны степени двойки, давайте их распишем:

1 байт = 8 бит = 256
2 байта = 16 бит = 65 536
4 байта = 32 бита = 4 294 967 296

Переменные разных типов имеют разные особенности и позволяют хранить числа в разных диапазонах.
https://github.com/Perov-M/inform/blob/main/dan.png

(*) - да, bool занимает 1 байт (8 бит), так как это минимальная адресуемая ячейка памяти. Есть способы запаковать логические переменные в 1 бит, о них поговорим в другом уроке.
(**) - на ESP8266/ESP32 int и unsigned int занимает 4 байта, то есть является аналогами типов long и unsigned long!
(***) - Компилятор также поддерживает 64 битные числа. Стандартные Arduino-библиотеки с переменными этого типа не работают, поэтому можно использовать только в своём коде.

Максимальные значения хранятся в константах, которые можно использовать в коде. Иногда это помогает избавиться от лишних вычислений:

UINT8_MAX - 255
INT8_MAX - 127
UINT16_MAX - 65 535
INT16_MAX - 32 767
UINT32_MAX- 4 294 967 295
INT32_MAX - 2 147 483 647
UINT64_MAX - 18 446 744 073 709 551 615
INT64_MAX - ‭9 223 372 036 854 775 807

Логический тип
bool - логический, он же булевый (придуман Джорджем Булем) тип данных, принимает значения 0 и 1 или false и true - ложь и правда. Используется для хранения состояний, например включено/выключено, а также для работы в условных конструкциях.

Также переменная типа bool принимает значение true, если присвоить ей любое отличное от нуля число.

bool a = 0;  // false
bool b = 1;  // true
bool c = 25; // true


Символьный тип
char - тип данных для хранения символов, символ указывается в одинарных кавычках:  char var = 'a';. По факту это целочисленный тип данных, а переменная хранит номер (код) символа в таблице ASCII:

https://github.com/Perov-M/inform/blob/main/ascii-table-alpharithms-scaled-1-600x357.webp

Отдельный символьный тип данных нужен для удобства работы, чтобы программа могла понять разницу между числом и символом, например для вывода на дисплей (чтобы вывести именно букву A, а не число 65).
Из символов можно составлять строки, об этом более подробно поговорим в уроках про символьные строки и String-строки.

Символы и числа
Несмотря на то, что в языке Си символ это по сути целое число, значения например '3' и 3 не равны между собой, потому что символ '3' с точки зрения программы является числом 51. 
На практике иногда бывает нужно конвертировать символы чисел в соответствующие им целые числа и наоборот (при работе со строками и буферами вручную), для этого распространены следующие алгоритмы:

Из символа в число - взять младший ниббл (4 бита): symbol & 0xF
Из символа в число - вычесть символ 0: symbol - '0'
Из числа в символ - прибавить символ 0: symbol + '0'

Объявление и инициализация
Объявление переменной - резервирование ячейки памяти указанного типа на имя: тип_данных имя;
Присваивание - задание переменной значения при помощи оператора = (равно): имя = значение;
Инициализация переменной - объявление и присваивание начального значения: тип_данных имя = значение;
Можно объявить и инициализировать несколько переменных через запятую:

byte myVal;
int sensorRead = 10;
byte val1, val2, val3 = 10;
Переменная должна быть объявлена до использования, буквально выше по коду. Иначе вы получите ошибку Not declared in this scope - переменная не объявлена.
Нельзя объявить две и более переменных с одинаковым именем в одной области определения.

Константы
Что такое константа понятно из её названия - что-то, значение чего мы можем только прочитать и не можем изменить: при попытке изменить получим ошибку компиляции. Задать константу можно двумя способами:

Как переменную, указав перед типом данных слово const: const тип_данных имя = значение;. Пример: const byte myConst = 10;. По сути это будет обычная переменная, но её значение нельзя поменять. Особенности:

Занимает место в оперативной памяти, но может быть оптимизирована (вырезана) компилятором, если используется просто как значение.
Имеет адрес в памяти, по которому к ней можно обратиться.
Вычисления с ней не оптимизируются и чаще всего выполняются точно так же, как с обычными переменными.
Компилятор выдаст ошибку, если имя константы совпадает с именем другой переменной в программе.
При помощи директивы #define, без знака равенства и точки с запятой в конце: #define имя значение
Переменные, константы const и другие создаваемые пользователем данные имеют такое важное понятие, как область видимости. Она бывает глобальной и локальной.


Глобальная
Глобальная переменная:

Объявляется вне функций, например просто в начале программы.
Доступна для чтения и записи в любом месте программы.
Находится в оперативной памяти на всём протяжении работы программы, то есть не теряет своё значение.
При объявлении имеет нулевое значение.

Локальная
Локальная переменная:

Объявляется внутри любого блока кода, заключённого в { фигурные скобки }.
Доступна для чтения и записи только внутри своего блока кода (и во всех вложенных в него).
Находится в оперативной памяти с момента объявления и до закрывающей фигурной скобки, то есть удаляется из памяти и её значение стирается.
При объявлении имеет случайное значение.

Статические переменные
Вспомним, как работает обычная локальная переменная: при входе в свой блок кода локальная переменная создаётся заново, а при выходе - удаляется из памяти и теряет своё значение. Если локальная переменная объявлена как static - она будет сохранять своё значение на всём протяжении работы программы, 
но область видимости останется локальной: взаимодействовать с переменной можно будет только внутри блока кода, где она создана (и во всех вложенных в него).

Преобразование типов
Иногда требуется преобразовать один тип данных в другой: например, функция принимает int, а вы хотите передать ей byte. В большинстве случаев компилятор сам разберётся и преобразует byte в int,
но иногда вылетает ошибка в стиле "попытка передать byte туда, где ждут int". В таком случае можно преобразовать тип данных, для этого достаточно указать нужный тип данных в скобках перед преобразуемой переменной (тип_данных)переменная,
иногда можно встретить запись тип_данных(переменная).
Результат вернёт переменную с новым типом данных, сам же тип данной у переменной не изменится. 
